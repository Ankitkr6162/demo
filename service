package analytics.rcp.uds.service;

import CwMobile.CwUtils;
import analytics.HedisRightChartPanel;
import analytics.rcp.uds.dao.UdsCdeDao;
import analytics.rcp.model.MainBody;
import analytics.rcp.model.Measure;
import analytics.rcp.model.Program;
import analytics.rcp.model.SupportingFact;
import analytics.rcp.uds.exception.UdsCdeException;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.time.LocalDate;
import java.time.Year;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

import static analytics.rcp.uds.constant.UdsCdeConstants.*;
import static emr.healowplus.todolist.core.util.TodoContext.isTodoEnabled;

public class UdsCdeService {

    private final UdsCdeDao udsCdeDao;
    private final HedisRightChartPanel hedisRightChartPanel;
    private static final Logger LOGGER = LoggerFactory.getLogger(UdsCdeService.class);


    public UdsCdeService() {
        this.udsCdeDao = new UdsCdeDao();
        this.hedisRightChartPanel = new HedisRightChartPanel();
    }

    /**
     * Generates Uds data based on patientId and isGapsOnly
     *
     * @param patientId The patient id and isGapsOnly to get data for
     * @return Returns a mainbody object
     */
    public String generateUds(boolean isGapsOnly, int patientId) {
        MainBody mainBody = null;
        String resp = null;
        if (ENABLE_POPHEALTH_HEDIS_ITEMKEY.equalsIgnoreCase(CwUtils.getItemKeyValue(null, POPHEALTH_HEDIS_ITEMKEY))) {
            resp = hedisRightChartPanel.generate(isGapsOnly, patientId);
            Gson gson = new GsonBuilder().setPrettyPrinting().create();
            mainBody = gson.fromJson(resp, MainBody.class);
        } else {
            mainBody = new MainBody();
        }
        try {
            if (isTodoEnabled()) {
                Optional<Program> udsProgram = Optional.ofNullable(setUdsPrograms(patientId));
                Optional<List<Program>> mainPrograms = Optional.ofNullable(mainBody.getPrograms());
                if (checkUDS() && mainPrograms.isPresent() && udsProgram.isPresent()) {
                    if (isGapsOnly) {
                        udsProgram.get().setMeasures(udsProgram.get().getMeasures().stream().filter(measure -> measure.getOutcome().equals(UDS_GAPS)).collect(Collectors.toList()));
                        mainPrograms.get().add(udsProgram.get());
                        mainBody.setPrograms(mainPrograms.get());
                    } else {
                        mainPrograms.get().add(udsProgram.get());
                        mainBody.setPrograms(mainPrograms.get());
                    }
                }
                udsMeasurePeriods(mainBody);
            }
        } catch (UdsCdeException e) {
            LOGGER.error("Exception while getting UDS data", e.getMessage());
        }
        return new GsonBuilder().excludeFieldsWithoutExposeAnnotation().serializeNulls().create().toJson(mainBody);
    }

    /**
     * Set Uds data for a given patientId
     *
     * @param patientId The patient id to get data for
     * @return Returns object of udsProgram
     */
    private Program setUdsPrograms(int patientId) {
        Program udsProgram = udsCdeDao.generateUDSProgram();
        List<Measure> udsCollection = udsCdeDao.generateUDSMeasure(patientId).stream().map(measure -> {
            String itemName = measure.getItemName();
            if (itemName != null && !itemName.isEmpty()) {
                measure.setOSSelectionType(COLUMN_NAME_ORDERSET);
            }
            return measure;
        }).collect(Collectors.toList());
        Optional<List<Measure>> udsMeasures = Optional.of(udsCollection);
        Optional<Map<String, List<SupportingFact>>> udsMeasureSupportingFacts = Optional.ofNullable(udsCdeDao.generateUDSMeasureSupportingFacts(patientId));
        if (udsMeasures.isPresent() && udsMeasureSupportingFacts.isPresent()) {
            for (Measure measure : udsMeasures.get()) {
                Optional<List<SupportingFact>> measureSupportingFacts = Optional.ofNullable(udsMeasureSupportingFacts.get().get(measure.getName()));
                if (measureSupportingFacts.isPresent()) {
                    measure.setSupportingFacts(measureSupportingFacts.get());
                }
            }
            if (udsProgram != null) {
                udsProgram.setMeasures(udsMeasures.get());
            }
        }
        return udsProgram;
    }

    /**
     * Checks for ebo_cde_job itemkey value and ebo_cde_master_program active status
     *
     * @return Returns ebo_cde_job itemkey value and ebo_cde_master_program active status
     */
    private boolean checkUDS() {
        int active = udsCdeDao.getUdsActiveStatus();
        return active == EBO_CDE_MASTER_PROGRAM_ACTIVE_VALUE && ENABLE_EBO_CDE_JOB_ITEMKEY.equalsIgnoreCase(CwUtils.getItemKeyValue(null, ITEM_KEY_EBO_CDE_JOB_ACTIVATION));
    }

    /**
     * Set date & time format for udsMeasurePeriodStartDate and udsMeasurePeriodEndDate fields
     */
    private void udsMeasurePeriods(MainBody mainBody) {
        mainBody.setUdsMeasurePeriodStartDate(LocalDate.of(Year.now().getValue(), 1, 1).format(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));
        mainBody.setUdsMeasurePeriodEndDate(LocalDate.of(Year.now().getValue(), 12, 31).format(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)));
    }
}


